#!/bin/bash
PIDFILE=/tmp/upload.pid
self_dir=`dirname "$(readlink -f $0)"`
source ${self_dir}/utils.sh
source ~pi/.params
export DB

remove() {
  sql "UPDATE files SET state=1 WHERE filename='$1'"
}

if [ ! -f $DB ];then
  sql "create table files (filename TEXT PRIMARY KEY NOT NULL, state INTEGER, mtime INTEGER)"
fi

if [ -r $PIDFILE ];then
  OLDPID=`cat $PIDFILE`
  if kill -0 $OLDPID &>/dev/null;then
    echo "Uploader is still running! ($OLDPID)" >/tmp/upload.$$
    exit -1
  fi 
fi

echo $$ >$PIDFILE

echo "Environment: scandir: '$DIR' ftp server: '$FTP'"
if [ -z "$FTP" -o -z "$DIR" ];then
  echo "Set environment!"
  exit -1
fi

upload_file() {
    FILE=$1
    MTIME=`stat "$FILE" --printf "%Y"`
    NEWNAME=${PREFIX}`date --date=@$MTIME "+%Y%m%d_%H%M%S"`.mp4
    echo "Uploading $FILE with new name $NEWNAME"
    curl -s --tcp-nodelay -n -T $FILE ftp://$FTP/$NEWNAME && remove $FILE
    if [ $? == 0 ];then
        echo "Upload OK"
        successful=$[ $successful +1 ]
    else
        echo "Upload FAILED"
        failed=$[ $failed +1 ]
    fi
}

successful=0
failed=0
if [ $# -gt 0 ];then
    msg "Uploading $# files"
    while [ $# -gt 0 ];do
        if [ -f $1 ];then 
            upload_file $1
        fi
        shift
    done
else
    findsort.py $DIR
    FILECOUNT=`filecount`
    msg "Found $FILECOUNT files to upload."
    while [ `filecount` -gt 4 ]; do
      FILE=`sql "SELECT filename FROM files WHERE state=0 ORDER BY mtime LIMIT 1"`
      upload_file $FILE
    done
fi

msg "Upload statistics: successful: $successful failed: $failed"
rm $PIDFILE

